{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStoredState","id","defaultValue","storedValue","localStorage","getItem","JSON","parse","React","useState","value","setValue","newValue","setItem","stringify","App","url","setUrl","inputValue","setInputValue","data","setData","activeListIndex","setActiveListIndex","anchorEl","setAnchorEl","status","setStatus","actualActiveListIndex","lists","activeListData","onSubmit","e","preventDefault","useEffect","fetch","then","res","json","cardsByList","cards","forEach","card","closed","name","trim","toLowerCase","idList","desc","split","slicePoint","findIndex","text","slice","join","push","pos","filter","list","sort","a","b","map","catch","style","maxWidth","margin","padding","display","alignItems","TextField","label","type","onChange","target","flex","Button","onClick","variant","marginLeft","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","i","MenuItem","Typography","component","gutterBottom","listStyle","key","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.795b54b7.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction useStoredState(id, defaultValue) {\n  let storedValue = localStorage.getItem(id);\n  if (storedValue) storedValue = JSON.parse(storedValue);\n\n  const [value, setValue] = React.useState(storedValue || defaultValue);\n\n  return [\n    value,\n    newValue => {\n      localStorage.setItem(id, JSON.stringify(newValue));\n      return setValue(newValue);\n    }\n  ];\n}\n\nfunction App() {\n  const [url, setUrl] = useStoredState(\"url\", \"\");\n  const [inputValue, setInputValue] = React.useState(url);\n  const [data, setData] = useStoredState(\"data\", null);\n  const [activeListIndex, setActiveListIndex] = useStoredState(\n    \"activeListIndex\",\n    2\n  );\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [status, setStatus] = React.useState(data ? \"SUCCESS\" : \"INIT\");\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const actualActiveListIndex =\n    data && data.lists[activeListIndex] ? activeListIndex : 0;\n  const activeListData = data && data.lists[actualActiveListIndex];\n\n  function onSubmit(e) {\n    e.preventDefault();\n    setUrl(inputValue);\n  }\n\n  function fetchData() {\n    if (!url || url === \"\") return;\n\n    setStatus(\"LOADING\");\n\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        const cardsByList = {};\n\n        data.cards.forEach(card => {\n          if (card.closed) return;\n          if (card.name.trim().toLowerCase() === \"set notes\") return;\n\n          if (!cardsByList[card.idList]) cardsByList[card.idList] = [];\n\n          let desc = card.desc.split(\"\\n\");\n\n          const slicePoint = desc.findIndex(\n            text => text.trim().toLowerCase() === \"---\"\n          );\n\n          if (slicePoint >= 0) {\n            desc = desc.slice(0, slicePoint);\n          }\n\n          desc = desc.join(\"\\n\");\n\n          cardsByList[card.idList].push({\n            id: card.id,\n            desc,\n            name: card.name,\n            pos: card.pos\n          });\n        });\n\n        return {\n          id: data.id,\n          name: data.name,\n          lists: data.lists\n            .filter(list => !list.closed)\n            .sort((a, b) => a.pos - b.pos)\n            .map(list => ({\n              id: list.id,\n              name: list.name,\n              cards: (cardsByList[list.id] || []).sort((a, b) => a.pos - b.pos)\n            }))\n        };\n      })\n      .then(setData)\n      .then(() => {\n        setStatus(\"SUCCESS\");\n      })\n      .catch(() => {\n        setStatus(\"ERROR\");\n      });\n  }\n\n  React.useEffect(() => {\n    fetchData();\n  }, [url]);\n\n  return (\n    <div style={{ maxWidth: 600, margin: \"0 auto\", padding: 20 }}>\n      <form\n        onSubmit={onSubmit}\n        style={{ display: \"flex\", alignItems: \"flex-end\" }}\n      >\n        <TextField\n          label=\"Trello .json url\"\n          type=\"text\"\n          value={inputValue}\n          onChange={e => setInputValue(e.target.value)}\n          style={{ flex: 1 }}\n        />\n        <Button\n          onSubmit={onSubmit}\n          onClick={onSubmit}\n          variant=\"contained\"\n          style={{ marginLeft: 20 }}\n        >\n          Set\n        </Button>\n      </form>\n      {data && (\n        <>\n          <Button\n            aria-controls=\"simple-menu\"\n            aria-haspopup=\"true\"\n            onClick={handleClick}\n            variant=\"contained\"\n            style={{ margin: \"20px 0\" }}\n          >\n            Select List\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n          >\n            {data.lists.map(({ id, name }, i) => (\n              <MenuItem id={id} onClick={() => setActiveListIndex(i)}>\n                {name}\n              </MenuItem>\n            ))}\n          </Menu>\n        </>\n      )}\n      {activeListData ? (\n        <div>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            {activeListData.name}\n          </Typography>\n          <ul style={{ listStyle: \"none\", margin: 0, padding: 0 }}>\n            {activeListData.cards.map(({ id, name, desc }) => (\n              <li key={id}>\n                <Typography variant=\"h5\" component=\"h3\" gutterBottom>\n                  {name}\n                </Typography>\n                {desc.split(\"\\n\").map((text, i) => (\n                  <Typography key={i} variant=\"body1\" gutterBottom>\n                    {text}\n                  </Typography>\n                ))}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <Typography variant=\"body1\">{status}</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}